/**********************************************************************************************************************
***************************************************      URLS      ****************************************************
***********************************************************************************************************************/
* Official MongoDB Docs
    + https://docs.mongodb.com/manual/aggregation/
    + https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/#data-modeling-example-one-to-many
* Spring Data Docs
    + https://docs.spring.io/spring-data/mongodb/docs/2.2.4.RELEASE/reference/html/#reference
* Having trouble connecting? View our troubleshooting documentation.
    + https://dochub.mongodb.org/core/atlas-connection-troubleshooting
    



/**********************************************************************************************************************
***************************************************      NOTES      ***************************************************
***********************************************************************************************************************/
* You must create a MongoDB user to access your cluster. 
  For security purposes, Atlas requires clients to authenticate as MongoDB users to access clusters.
* MongoDB users are separate from Atlas users:
    + MongoDB users can access databases hosted in Atlas.
    + Atlas users can log into Atlas but do not have access to MongoDB databases.
* Connection String from Atlas: mongodb+srv://dbAdmin:<password>@royally-clustered-5htnk.mongodb.net/test
    + Replace <password> with the password for the dbAdmin user.
    + When entering your password, make sure that any special characters are URL encoded.
        - https://dochub.mongodb.org/core/atlas-url-encoding
* Data Modeling Tips
    + When considering where to split your data, the most frequently-accessed portion of the data should go in the 
      collection that the application loads first. 
    + In this example, the schema is split at ten reviews because that is the number of reviews visible in the
      application by default.
* Data Modeling - Subset Pattern
    + Instead of storing all of the reviews with the product, you can split the collection into two collections:
    + The product collection stores information on each product, including the productâ€™s ten most recent reviews:
        {
          "_id": 1,
          "name": "Super Widget", "description": "This is the most useful item in your toolbox.",
          "price": { "value": NumberDecimal("119.99"), "currency": "USD" },
          "reviews": [ {
              "review_id": 786, "review_author": "Kristina",
              "review_text": "This is indeed an amazing widget.", "published_date": ISODate("2019-02-18")
            },
            { "review_id": 776, "review_author": "Pablo",
              "review_text": "Amazing!", "published_date": ISODate("2019-02-16")
            }]
        }
    + The review collection stores all reviews. Each review contains a reference to the product for which it was written.
        {
          "review_id": 786, "product_id": 1, "review_author": "Kristina", 
          "review_text": "This is indeed an amazing widget.", "published_date": ISODate("2019-02-18")
        },
        {
          "review_id": 1, "product_id": 1, "review_author": "Hans",
          "review_text": "Meh, it's okay.", "published_date": ISODate("2017-12-06")
        }
    + By storing the ten most recent reviews in the product collection, only the required subset of the overall data is 
      returned in the call to the product collection. If a user wants to see additional reviews, the application makes 
      a call to the review collection.
    + Trade-Offs of the Subset Pattern
        - The subset pattern results in data duplication. 
        - Extra steps must be taken to ensure that the reviews are consistent between each collection.
    + Other Sample Use Cases
        - In addition to product reviews, the subset pattern can also be a good fit to store:
             * Comments on a blog post, when you only want to show the most recent or highest-rated comments by default.
             * Cast members in a movie, when you only want to show cast members with the largest roles by default.



/**********************************************************************************************************************
*************************************************      EXCEPTIONS      ************************************************
***********************************************************************************************************************/
* 



