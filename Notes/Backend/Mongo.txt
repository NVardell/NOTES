/**********************************************************************************************************************
***************************************************      URLS      ****************************************************
***********************************************************************************************************************/
* Official MongoDB Docs
    + https://docs.mongodb.com/manual/aggregation/
    + https://docs.mongodb.com/manual/reference/glossary/
* Official MongoDB - Blog
    + https://www.mongodb.com/blog/post/building-with-patterns-the-attribute-pattern
    + https://www.mongodb.com/blog/post/building-with-patterns-the-polymorphic-pattern
    + https://www.mongodb.com/blog/post/building-with-patterns-the-bucket-pattern
* Spring Data Docs
    + https://docs.spring.io/spring-data/mongodb/docs/2.2.4.RELEASE/reference/html/#reference
* Having trouble connecting? View our troubleshooting documentation.
    + https://dochub.mongodb.org/core/atlas-connection-troubleshooting
* Design Patterns
    + https://www.mongodb.com/blog/post/building-with-patterns-the-attribute-pattern?utm_campaign=T5_DEV_WW_E3_V4_How%20do%20I%20design%20my%20schema%3F&utm_medium=email&utm_source=Eloqua&utm_term=How%20do%20I%20design%20my%20schema%3F%20  
    + https://docs.mongodb.com/manual/core/data-model-design/
    + https://docs.mongodb.com/manual/tutorial/model-time-data/
    + https://docs.mongodb.com/manual/tutorial/model-computed-data/
    + https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-one-relationships-between-documents/#data-modeling-example-one-to-one
    + https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/#data-modeling-example-one-to-many
* Query Operators (Functions for accessing Data in DB)
    + https://docs.mongodb.com/manual/reference/operator/
    + https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#pipe._S_lookup
    + https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup



/**********************************************************************************************************************
**************************************************      GLOSSARY      *************************************************
***********************************************************************************************************************/
* Collection
    + A grouping of MongoDB documents. 
    + The equivalent of an RDBMS table. 
    + Exists within a single database. 
    + Does not enforce a schema. 
    + Documents within a collection can have different fields. 
        - Typically, all documents in a collection have a similar or related purpose. See Namespaces.
* Document
    + A record in a MongoDB collection and the basic unit of data in MongoDB. 
    + Documents are analogous to JSON objects but exist in the database in a more type-rich format known as BSON. 
* Namespace (Collection Namespace)
    + The canonical name for a collection or index in MongoDB. 
    + A combination of the DB name & collection name or index, like: [database-name].[collection-or-index-name]. 
    + All documents belong to a namespace. See Namespaces.
* Namespaces
    + String that identifies the database & collection/index, in which documents belong.
    + Format = <database>.<collection>  OR  <database>.<index>
    + Max Length of Collection Namespace
        - Includes the database name, the dot (.) separator, and the collection/index name.
        - 120 bytes max
    + Naming Restrictions
        - DB Name
            * Max Length = 64 characters.
            * Cannot be null.
            * Case insensitive & cannot differ only by the case of the characters.
            *  Depending on OS used for deployment, certain characters are not allowed.
                + Linux = /\. "$
                + Windows =  /\. "$*<>:|?
        - Collection Name
            * Should begin with an underscore, or a letter character.
            * Cannot
                + Contain the $
                + Contain the null character
                + Be an empty string (e.g. "")
                + Begin with the 'system.' prefix. (Reserved for internal use.)
            * If name contains special characters, such as underscore or numbers, then to access the 
              collection use db.getCollection() method in the mongo shell, or similar method w/ your driver.



/**********************************************************************************************************************
***************************************************      NOTES      ***************************************************
***********************************************************************************************************************/
* MongoDB stores times in UTC by default, and will convert any local time representations into this form.
    + In the MongoDB shell, you can store both the current date and the current clientâ€™s offset from UTC.
            var now = new Date();
            db.data.save( { date: now, offset: now.getTimezoneOffset() } );
    + You can reconstruct the original local time by applying the saved offset:
            var record = db.data.findOne();
            var localNow = new Date( record.date.getTime() -  ( record.offset * 60000 ) );
* You must create a MongoDB user to access your cluster. 
  For security purposes, Atlas requires clients to authenticate as MongoDB users to access clusters.
* MongoDB users are separate from Atlas users:
    + MongoDB users can access databases hosted in Atlas.
    + Atlas users can log into Atlas but do not have access to MongoDB databases.
* Connection String from Atlas: mongodb+srv://dbAdmin:<password>@royally-clustered-5htnk.mongodb.net/test
    + Replace <password> with the password for the dbAdmin user.
    + When entering your password, make sure that any special characters are URL encoded.
        - https://dochub.mongodb.org/core/atlas-url-encoding
* Database References
    + For many use cases in MongoDB, the denormalized data model, where related data is stored within a single Document
      will be optimal.  However, in some cases, it makes sense to store related data in separate documents,
      typically in different collections or databases.
    + MongoDB has 2 ways for relating/referencing documents.
        0. IMPORTANT NOTES
            - Unless you have a compelling reason to use DBRefs, use manual refs instead.
            - If you have Documents in a single Collection that relate to Docs in more than one Collection,
              you many need to consider using DBRefs.
        1. Manual References
            - Save the "_id" field of one document in another document as a reference.
                * The app can run a SECOND query to retrieve related data.
            - Uses
                * Nearly every case where you want to store a relationship between 2 documents.
                * They are simple to create, & you app can resolve them as needed.
            - Limitations
                * The references do not convey the DB & Collection names.
            - Process
                * Consider the following operation to insert 2 documents, using the "_id" field of the first
                  document as a reference in the second document, then when a query returns the document
                  from 'people' collection, you can, if needed, make a second query for the document
                  referenced by the places_id field in the 'places' collection.
                        original_id = ObjectId()
                        db.places.insert({ "_id": original_id, "name": "Broadway Center", "url": "bc.example.net" })
                        db.people.insert({ "name": "Erin", "places_id": original_id, "url":  "bc.example.net/Erin" })
        2. DBRefs
            - References from one document to another using the value of the first documents "_id" field,
              collection name, & DB name.  
            - By including these names, DBRef allow documents located in multiple collections to be easily linked
              w/ docs from a single collection.
            - To resolve DBRefs, the app must perform additional queries to return the referenced documents.
                * Many drivers have helper methods that form the query for the DBRef automatically.
                    + The drivers DON'T automatically resolve DBRefs into Documents.
            - Provides Common...
                1. Formats & types to represent relationships between documents.
                2. Semantics for representing links between Documents, if your DB must interact w/ many sources.



/**********************************************************************************************************************
*************************************************      OPERATORS      *************************************************
***********************************************************************************************************************/
* $lookup
    + Perform a left outer join to an unsharded collection in the same database.
    + Introduced in MongoDB 3.2
* $graphLookup
    + Join an unsharded collection to perform a recursive search.
    + Introduced in MongoDB 3.4




/**********************************************************************************************************************
***********************************************      DATA MODELING      ***********************************************
***********************************************************************************************************************/
* Tips
    + Grouping Documents based on the queries you want to run, helps improve performance.
        - Instead of separating the object across tables or collections, commonly found in relational db schema's.
    + When considering where to split your data, the most frequently-accessed portion of the data should go in the 
      collection that the application loads first. 
    + In this example, the schema is split at ten reviews because that is the number of reviews visible in the
      application by default.
* Document Data Model
    + The data does NOT need to be the same, in order for Documents to be in the same Collection.
    + The key consideration for the structure of your documents is the decision to embed or use references.
        - Embed (More details below.)
            * Embed related data in a single document, and generally known as 'de-normalized' models.
        - Reference (More details below.)
            * Normalized Data Models describe relationships using references between documents.
* Embedding Models
    + Allow applications to store related pieces of information in the same database record.
      as a result, applications may need to issue fewer queries & updates to complete common tasks.
    + Use cases: (In general...)
        1. You have 'contains' relationships between entities. (See One-to-One Relationships w/ Embedded Docs.)
        2. You have One-to-Many relationships between entities.  In these relationships, the 'many' or child docs,
           always appear with or are viewed win the context of the 'one' or parent docs. 
           (See One-to-Many Relationships w/ Embedded Docs.)
    + Provides (In general...)
        - Better performance for read operations, as well as the ability to request and retrieve data in a single db operation.
        - Make it possible to update related data in a single atomic write operation.
    + Example: { _id:       <ObjectId1>,  
                 username:  "123xyz",
                 contact:   { phone: "123-456-7890", email: "xyz@example.com" },   // EMBEDDED SUB-DOCUMENT
                 access:    { level: 5,              group: "dev" }                // EMBEDDED SUB-DOCUMENT
               }
* Normalized Models
    + Use cases: (In general...)
        1. When embedding would result in duplication of data but would not provide sufficient read performance
           advantages to outweigh the implications of the duplication.
        2. To represent more complex Many-to-Many relationships. 
        3. To model large hierarchical data sets.
    + To join collections, MongoDB provides the aggregation stages $lookup & $graphLookup.
    + Example:                                 { _id: <ObjectId2>,         ######  CONTACT DOCUMENT
                USER DOCUMENT      /---------<   user_id: <ObjectId1>,
                {   _id: <ObjectId1>,            phone: "123-456-7890",
                    username: "123xyz" }         email: "xyz@example.com" }
                                   \           { _id: <ObjectId3>,         ######  ACCESS DOCUMENT
                                    \--------<   user_id: <ObjectId1>,
                                                 level: 5, group: "dev" }




/**********************************************************************************************************************
**********************************************      DESIGN PATTERNS      **********************************************
***********************************************************************************************************************/
* Polymorphic Pattern
    + When all documents in a collection are of similar structure, but not identical.
    + Useful:
        - When we want to access info from a single collection.
        - Can easily flow into embedded sub-documents. (Ex. List of Events (Event would be a sub-document.))
        - When you want to merge many data sources into one. (Ex. Merger combining data from business's they acquire.)
        - For Single View Applications.
        - Product catalogs (Where each product might have different attributes.)
        - Content Management.
    + Example Use Cases, Concepts, Breakdowns, & Explanations
        - Athlete App 
            * Goal: Track professional athletes across all sports.
            * Requirements
                1. Access all of the athletes in our app
                    + Each Athlete might have very different attributes. (This is where Polymorphic Pattern shines!)
                        - Pretend we store data for all athletes in the same collection.
                            * The data does not need to be the same even though the documents are in the same collection.
                            * With the Polymorphic Pattern we are easily able to accommodate the differences.
                            * Athlete Document #1
                                + (Common) Sport
                                + (Common) Athlete Name
                                + (Common) Career Earnings
                                + Career Titles
                                + Other Sports
                            * Athlete Document #2
                                + (Common) Sport
                                + (Common) Athlete Name
                                + (Common) Career Earnings
                                + Event -----------------------< Can then easily create a sub-document for Events
                                    - Type
                                    - Total Tournaments
                                    - Total Titles
* Attribute Pattern
    + General Uses
        - If you need to search through many fields at the same time.
        - Well suited for schemas that have sets of fields that have the same value type.
        - Also works well when working with the characteristics of products.
        - Large documents with many similar fields, but there is a subset of fields that share common
           characteristics & we want to sort or query on that subset of fields.
        - The fields needed for sorting are only found in a small subset of documents.
        - Both of the above; large documents w/ sorting fields in a small subset.
    + Sample Use Cases
        - Lists of Dates (Like the Movie Release Dates example listed below.)
        - Listing Products (Such as clothing(Multiple sizes/colors/etc.))
    + Pros & Performance
        - Provides easier indexing, targeting many similar fields per document.
            * Beforehand; to optimize searches, we'd likely need many indexes to account for 
              all of the subsets.  However; creating all of these indexes could reduce performance.
        - By moving the subset of data into a key/value sub-document, we can use non-deterministic field names,
          add additional qualifiers to the info, & more clearly state relationship of original field & value.
        - Reduces # of indexes, making queries easier to write, and resulting in faster execution time.
    + Notes
        - By using the Attribute Pattern, we can add organization to our documents for common characteristics,
          and account for rare/unpredictable fields.
        - The key/value convention, used to create the subset array, allows for the use of non-deterministic
          naming & the addition of qualifiers.
            * For example, if our data collection was on bottles of water, our attribute subset might look like:
                + Specs [ 
                    { K:"volume", V:"500", U:"ml" }, 
                    { K:"height", V:"10", U:"in" } 
                ]
                    - Here we break the info into keys, values, and with a third field 'U', which allows
                      for the units of measure to be stored separately.
                        * {  "specks.k": 1,  "specs.v": 1,  "specs.u": 1  }
    + Example Use Cases, Concepts, Breakdowns, & Explanations
        - Collection of Movies
            * The Documents will likely have similar fields across all of the movies: title, director, producer, etc.
            * Requirement: Want to search by Release Date.
                + Challenges: 
                    - Which release date? (Movies are often released on different days in different countries.)
                        * A search for a 'Release Date' would require looking across many fields at once.  In order
                          to search quickly, we'd need several indexes on our 'Movies Collection'
                            + Movie Document #1 (BEFORE ATTRIBUTE PATTERN)
                                - Title
                                - Director
                                - Release_US
                                - Release_France
                                - Release_Italy
                                - Release_UK
                        * By using the Attribute Pattern, we can move this subset of info into an array & reduce
                          the required indexing.  
                        * Indexing becomes much more manageable by creating one index on the elements of the array.
                            + { "releases.location": 1, "releases.date": 1 } (Not positive what this means.  Assumable, indexes using mongo shell. :/)
                        * We turn the info into an array of key-value pairs:
                            + Movie Document #1 (AFTER ATTRIBUTE PATTERN)
                                - Title
                                - Director
                                - Releases [  { location, date }  ]     (USE OF ATTRIBUTE PATTERN.)
* Subset Pattern
    + Instead of storing all of the reviews with the product, you can split the collection into two collections:
    + The product collection stores information on each product, including the productâ€™s ten most recent reviews:
        {
          "_id": 1,
          "name": "Super Widget", "description": "This is the most useful item in your toolbox.",
          "price": { "value": NumberDecimal("119.99"), "currency": "USD" },
          "reviews": [ {
              "review_id": 786, "review_author": "Kristina",
              "review_text": "This is indeed an amazing widget.", "published_date": ISODate("2019-02-18")
            },
            { "review_id": 776, "review_author": "Pablo",
              "review_text": "Amazing!", "published_date": ISODate("2019-02-16")
            }]
        }
    + The review collection stores all reviews. Each review contains a reference to the product for which it was written.
        {
          "review_id": 786, "product_id": 1, "review_author": "Kristina", 
          "review_text": "This is indeed an amazing widget.", "published_date": ISODate("2019-02-18")
        },
        {
          "review_id": 1, "product_id": 1, "review_author": "Hans",
          "review_text": "Meh, it's okay.", "published_date": ISODate("2017-12-06")
        }
    + By storing the ten most recent reviews in the product collection, only the required subset of the overall data is 
      returned in the call to the product collection. If a user wants to see additional reviews, the application makes 
      a call to the review collection.
    + Trade-Offs of the Subset Pattern
        - The subset pattern results in data duplication. 
        - Extra steps must be taken to ensure that the reviews are consistent between each collection.
    + Other Sample Use Cases
        - In addition to product reviews, the subset pattern can also be a good fit to store:
             * Comments on a blog post, when you only want to show the most recent or highest-rated comments by default.
             * Cast members in a movie, when you only want to show cast members with the largest roles by default.
* Pre-Compute Pattern (Model Computed Data)
    + Eliminates the need to calculate values every time the data is requested.
    + Instead of querying the data, and then running calculations, such as totals, to return/display on the UI,
      we can add a calculated value to the document object outside of the array of data, and update the calculated
      value anytime we add new data into the array.
    + The pre-aggregated sum/count calculated values, then enable us to make further computations such as min, max, average, etc.






https://www.mongodb.com/blog/post/building-with-patterns-the-bucket-pattern
* Bucket Pattern
    + Use Cases
        - 
        - Time Series Data
        - Aggregating Multiple Data Sources
        - Financial Applications (Group Transactions by Type, Date, Customer, etc.)




    + Common method to organize time-series data is to group the data into buckets where each bucket represents a
      uniform unit of time such as a day or year. 
    + Bucketing organizes specific groups of data to help:
        - Discover historical trends
        - Forecast future trends
        - Optimize Storage Usage
    + Example: 
        - This approach does not scale well in terms of data and index size.
        - If the app requires indexes on the "sensor_id" & "timestamp" fields, 
          every incoming read from the sensor would need to be indexed to improve performance.
              // temperatures collection
                {
                  "_id": 1, "sensor_id": 12345,
                  "timestamp": ISODate("2019-01-31T10:00:00.000Z"), "temperature": 40
                },
                ...,
                {
                  "_id": 100, "sensor_id": 12345,
                  "timestamp": ISODate("2019-01-31T10:01:00.000Z"), "temperature": 40
                }
        - Leveraging the Document Model, to Bucket the data into Documents that hold the measurements 
          for a set timespan, we can update the original schema to create Documents that represent data
          measurements taken every minute, into hour long buckets.
        - This updated schema improves scalability & mirrors how the app actually uses the data.
          A user likely wouldn't query a specific temperature reading.  Instead, a user would generally query for
          temperature behavior over time.
        - The Bucket Pattern helps facilitate those queries by grouping the data into uniform time periods.
        - The below pattern is a Mixed Pattern, incorporating Bucket & Compute Patterns
              // Updated Schema - Temperature Sensor Buckets
                {
                    "_id": 1, "sensor_id": 12345,
                    "transaction_count": 60, "sum_temperature": 1783, --------------------------- // COMPUTE PATTERN
                    "start_date": ISODate("2019-01-31T10:00:00.000Z"),
                    "end_date": ISODate("2019-01-31T10:59:59.000Z"),
                    "measurements": [ ----------------------------------------------------------- // BUCKET PATTERN
                        { "timestamp": ISODate("2019-01-31T10:00:00.000Z"), "temperature": 40 },
                        ...,
                        { "timestamp": ISODate("2019-01-31T10:59:00.000Z"), "temperature": 38 }
                    ]
                }



/**********************************************************************************************************************
*************************************************      EXCEPTIONS      ************************************************
***********************************************************************************************************************/
* 



