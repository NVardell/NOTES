/****************************************************************************************************************************************************
***********************************************************     HELPFUL DOCUMENTATION     ***********************************************************
*****************************************************************************************************************************************************/
* Cucumber Links
    + Homepage - https://cucumber.io/
    + Overview - https://cucumber.io/docs/guides/overview/
* Gherkin Links
    + Reference - https://cucumber.io/docs/gherkin/reference/
    + Keywords - https://cucumber.io/docs/gherkin/reference/#keywords
    + Tags - https://cucumber.io/docs/cucumber/api/#tags



/****************************************************************************************************************************************************
*******************************************************************     NOTES     *******************************************************************
*****************************************************************************************************************************************************/
* Cucumber
    + Cucumber is a JUnit extension!  It is launched by running JUnit from you build tool or IDE.
        - In order to use the Cucumber extension, the Cucumber-JUnit dependency is required.
                    <dependency>
                        <groupId>io.cucumber</groupId>
                        <artifactId>cucumber-junit</artifactId>
                        <version>${cucumber.version}</version>
                        <scope>test</scope>
                    </dependency>
    + Running Cucumber
        - Command Line (Most Common Option - According to Official Docs page......)
            * 
        - JUnit
    + Step Definitions
        - In order for Cucumber to comprehend the Gherkin, Step Definitions are required for mapping the Gherkin steps to actual code.
        - Step definitions hardwire the specification to the implementation.
        - The definitions can be written in many programming languages, below is an example in JavaScript.
                When("{maker} starts a game", function(maker) {
                    maker.startGameWithWord({ word: "whale" })
                })
* Gherkin
    + Gherkin documents are stored in '.feature' files and are typically versioned in source control alongside software
    + Primary Keywords
        - Feature
        - Rule
        - Example (or Scenario)
        - Given, When, Then, And, But (Scenario Steps)
        - Background
        - Scenario Outline (or Scenario Template)
        - Examples
    + Secondary Keywords
        - Doc String  =  """
        - Data Tables =  |  
        - Tags        =  @
        - Comments    =  #  
    + Feature Keyword
        - Provides a high-level description of a software feature, and to group related scenarios.
        - Will always be the first keyword in a feature file, followed by a ':' and a mini description of the feature (Example Below)
                Feature: Quite the Description
        - You can add free-form text underneath the 'Feature' primary keyword to add further descriptions.
            * The name & description have no special meaning to Cucumber.
            * These description lines are ignored by Cucumber at runtime, but are available by default in generated html report. (Example Below)
                    Feature: Quite the Description
                        Right here you can put more words to further describe the description
                        above that is simply so quite.
            * The free form description ends when a new line is started with a keyword such as 'Rule', 'Example', or 'Scenario Outline'.
        - You can place tags above 'Feature' to group related features, independent of your file & directory structure.
    + Rule Keyword (Added in Gherkin v6)
        - Purpose is to represent one 'business rule' that should be implemented.
        - Provides additional info for a feature.
        - Used to group together several scenarios that belong to the same 'business rule'.
        - A 'Rule' should contain one or more scenarios that illustrate the particular rule.
        - Cannot contain a 'Background'.
        - Example of a 'Rule'
                # -- FILE: features/gherkin.rule_example.feature
                Feature: Highlander

                  Rule: There can be only One

                    Example: Only One -- More than one alive
                      Given there are 3 ninjas
                      And there are more than one ninja alive
                      When 2 ninjas meet, they will fight
                      Then one ninja dies (but not me)
                      And there is one ninja less alive

                    Example: Only One -- One alive
                      Given there is only 1 ninja alive
                      Then he (or she) will live forever ;-)

                  Rule: There can be Two (in some cases)

                    Example: Two -- Dead and Reborn as Phoenix
                      ...
    + Tags '@'
        * Tags can be placed above any of the following Gherkin keywords/elements
            + Feature
            + Scenario
            + Scenario Outline
            + Examples
        * A feature or scenario can have as many tags as you want, just separate them with spaces. (Example Below)
                @billing @bicker @annoy
                Feature: Verify billing
        * Tag Inheritance
            + Tags are inherited by child elements.
            + Tags listed above a 'Feature' will be inherited by 'Scenario', 'Scenario Outline', & 'Examples'.
            + Tags above a 'Scenario Outline' will be inherited by 'Examples'.
        * Tag Expressions
            + A tag expression is simply an infix boolean expression. Examples Below.
                    Expression          Description
                    @fast               Scenarios tagged with @fast
                    @wip and not @slow  Scenarios tagged with @wip that arenâ€™t also tagged with @slow
                    @smoke and @fast    Scenarios tagged with both @smoke and @fast
                    @gui or @database   Scenarios tagged with either @gui or @database
        * There are two purposes for tags
            + Running a subset of scenarios
                - You can tell Cucumber to only run scenarios with a particular tag, and can be accomplished in many ways.
                    * JVM System Property (Example Below)
                        mvn test -Dcucumber.options='--tags "@smoke and @fast"'
                    * Environment Variables (Example Below)
                        # Linux / OS X:
                        CUCUMBER_OPTIONS='--tags "@smoke and @fast"' mvn test
                        # Windows:
                        set CUCUMBER_OPTIONS='--tags "@smoke and @fast"'; mvn test
                    * Changing JUnit Runner Class (Examples Below)
                        @CucumberOptions(tags = "not @smoke")
                        @CucumberOptions(tags = "@smoke and @fast")
                        @CucumberOptions(tags = "(@smoke or @ui) and (not @slow)")
            + Scoping hooks to a subset of scenarios
                - Hooks can be conditionally selected for execution based on the tags of the scenario.
                - To run a particular hook only for certain scenarios, you can associate a 'Before' or 'After' Hook with a tag expression (Examples Below)
                        Annotated Method Style:
                            @After("@browser and not @headless")
                            public void doSomethingAfter(Scenario scenario){ ... }
                        Lambda Style:
                            After("@browser and not @headless", (Scenario scenario) -> { ... });
    + Example
        - Concrete example that illustrates a business rule, and consists of a list of steps.
        - Keyword 'Example' is a synonym for keyword 'Scenario'.
        - Examples follow the same given pattern every time
            * Describe an initial context (Given steps)
            * Describe an event (When steps)
            * Describe an expected outcome (Then steps)
    + Steps
        - Steps start with keywords such as:
            * Given
                + Used to describe the initial context; typically, something that happened in the past.
                + The purpose of this step is to 'PUT THE SYSTEM IN A KNOWN STATE' before any further interactions occur.
            * When
                + When steps are used to describe an event or action.
                + STRONGLY recommended to only have ONE 'When' step per 'Scenario'.
            * Then
            * And
            * But
        - Cucumber executes them in order, one at a time, executing a matching step definition every time.
        - Keywords are NOT taken into account when looking for step definitions.  This means you cannot have multiple 
          steps with the same text. Cucumber considers the following steps duplicates. (Example Below)
                Given there is money in my account
                Then there is money in my account
    + And / But
    + Background
    + Scenario Outline
    + Step Arguments
    + Data Tables



/****************************************************************************************************************************************************
*******************************************************************     Q & A     *******************************************************************
*****************************************************************************************************************************************************/
* What is Cucumber?
    - Cucumber is a tool that supports BDD (Behavior Driven Development).
* What Cucumber does?
    - Reads executable specifications written in plain text and validates that the software does what those specifications say.
    - Specifications can be made up of multiple scenarios that each have their own list of steps for Cucumber to work through.
    - Cucumber verifies that the software conforms with the specs & then generates a report with success/failure for each scenario.
* How is Cucumber able to understand the scenarios?
    - They must follow basic syntax rules called Gherkin.
* What is Gherkin?
    - Gherkin is a simple set of grammar rules that makes plain text structured enough for Cucumber to understand.
* What purposes does Gherkin serve?
    - Unambiguous executable specifications
    - Automated testing using Cucumber
    - Documents how the system actually behaves by the reports it generates
* Who should write step definitions?
    - Whoever writes the Gherkin should be writing the step definitions; which in general, should be the developers.
* What will always be the first primary keyword in a Gherkin 'feature' file?
    - Feature.
* 
    - 
* 
    - 